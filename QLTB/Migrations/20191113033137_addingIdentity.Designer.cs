// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QLTB.Data;

namespace QLTB.Migrations
{
    [DbContext(typeof(QLTBITDbContext))]
    [Migration("20191113033137_addingIdentity")]
    partial class addingIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("QLTB.Data.Models.BanGiao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChiNhanhId");

                    b.Property<string>("Khoi")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LoaiThietBi")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LyDo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("NgaySua");

                    b.Property<DateTime>("NgayTao");

                    b.Property<string>("NguoiLap")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NguoiNhan")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("NguoiSua");

                    b.Property<string>("PhongBan")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("TinhTrang");

                    b.Property<string>("VanPhong")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ChiNhanhId");

                    b.ToTable("BanGiaos");
                });

            modelBuilder.Entity("QLTB.Data.Models.CaiDat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BanGiaoId");

                    b.Property<string>("DienGiai")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<double>("DonGia");

                    b.Property<string>("GhiChu")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("NgayGiao");

                    b.Property<int>("PhanMemId");

                    b.Property<DateTime>("ThoiGianSuDung");

                    b.Property<bool>("TinhTrang");

                    b.HasKey("Id");

                    b.HasIndex("BanGiaoId");

                    b.HasIndex("PhanMemId");

                    b.ToTable("CaiDats");
                });

            modelBuilder.Entity("QLTB.Data.Models.ChiNhanh", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DiaChi")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("DienThoai")
                        .HasMaxLength(20);

                    b.Property<string>("MaChiNhanh")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ChiNhanhs");
                });

            modelBuilder.Entity("QLTB.Data.Models.ChiTietBanGiao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BanGiaoId");

                    b.Property<DateTime?>("BaoHanhDen");

                    b.Property<bool>("ChuyenSuDung");

                    b.Property<string>("DienGiai")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<double>("DonGia");

                    b.Property<string>("GhiChu")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("NgayChuyen");

                    b.Property<DateTime?>("NgayGiao");

                    b.Property<int>("SoLuong");

                    b.Property<int>("ThietBiId");

                    b.Property<bool>("TinhTrang");

                    b.HasKey("Id");

                    b.HasIndex("BanGiaoId");

                    b.HasIndex("ThietBiId");

                    b.ToTable("ChiTietBanGiaos");
                });

            modelBuilder.Entity("QLTB.Data.Models.LoaiPhanMem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GhiChu")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("LoaiPhanMems");
                });

            modelBuilder.Entity("QLTB.Data.Models.LoaiThietBi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GhiChu")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("LoaiThietBis");
                });

            modelBuilder.Entity("QLTB.Data.Models.NhanVien", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChiNhanhId");

                    b.Property<string>("Khoi")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PhongBan")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("TinhTrang");

                    b.Property<string>("VanPhong")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ChiNhanhId");

                    b.ToTable("NhanViens");
                });

            modelBuilder.Entity("QLTB.Data.Models.NhapKho", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CTBGId");

                    b.Property<string>("DienGiaiTB")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("KhoVanPhong")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LyDo")
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("NgayNhapKho");

                    b.Property<DateTime?>("NgaySuDung");

                    b.Property<DateTime?>("NgayThanhLy");

                    b.Property<string>("NguoiNhapKho")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NguoiSuDung")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NguoiThanhLy")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TenThietBi")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("ThanhLy");

                    b.HasKey("Id");

                    b.HasIndex("CTBGId");

                    b.ToTable("NhapKhos");
                });

            modelBuilder.Entity("QLTB.Data.Models.PhanMem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LoaiPMId");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("LoaiPMId");

                    b.ToTable("PhanMems");
                });

            modelBuilder.Entity("QLTB.Data.Models.ThietBi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BaoHanh");

                    b.Property<string>("DienGiai")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<double>("Gia");

                    b.Property<string>("HinhAnh")
                        .HasColumnType("varchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("LoaiThietBiId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("TrangThai");

                    b.HasKey("Id");

                    b.HasIndex("LoaiThietBiId");

                    b.ToTable("ThietBis");
                });

            modelBuilder.Entity("QLTB.Data.Models.VanPhong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChiNhanhId");

                    b.Property<string>("DiaChi")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("DienThoai")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("ChiNhanhId");

                    b.ToTable("VanPhongs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QLTB.Data.Models.BanGiao", b =>
                {
                    b.HasOne("QLTB.Data.Models.ChiNhanh", "ChiNhanh")
                        .WithMany()
                        .HasForeignKey("ChiNhanhId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QLTB.Data.Models.CaiDat", b =>
                {
                    b.HasOne("QLTB.Data.Models.BanGiao", "BanGiao")
                        .WithMany()
                        .HasForeignKey("BanGiaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QLTB.Data.Models.PhanMem", "PhanMem")
                        .WithMany()
                        .HasForeignKey("PhanMemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QLTB.Data.Models.ChiTietBanGiao", b =>
                {
                    b.HasOne("QLTB.Data.Models.BanGiao", "BanGiao")
                        .WithMany()
                        .HasForeignKey("BanGiaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("QLTB.Data.Models.ThietBi", "ThietBi")
                        .WithMany()
                        .HasForeignKey("ThietBiId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QLTB.Data.Models.NhanVien", b =>
                {
                    b.HasOne("QLTB.Data.Models.ChiNhanh", "ChiNhanh")
                        .WithMany()
                        .HasForeignKey("ChiNhanhId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QLTB.Data.Models.NhapKho", b =>
                {
                    b.HasOne("QLTB.Data.Models.ChiTietBanGiao", "ChiTietBanGiao")
                        .WithMany()
                        .HasForeignKey("CTBGId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QLTB.Data.Models.PhanMem", b =>
                {
                    b.HasOne("QLTB.Data.Models.LoaiPhanMem", "LoaiPhanMem")
                        .WithMany()
                        .HasForeignKey("LoaiPMId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QLTB.Data.Models.ThietBi", b =>
                {
                    b.HasOne("QLTB.Data.Models.LoaiThietBi", "LoaiThietBi")
                        .WithMany()
                        .HasForeignKey("LoaiThietBiId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QLTB.Data.Models.VanPhong", b =>
                {
                    b.HasOne("QLTB.Data.Models.ChiNhanh", "ChiNhanh")
                        .WithMany()
                        .HasForeignKey("ChiNhanhId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
